{"version":3,"sources":["tests/cache.test.ts"],"names":[],"mappings":";;AAAA,6BAA8B;AAC9B,kCAA6B;AAE7B,QAAQ,CAAC,OAAO,EAAE;IACd,IAAI,KAAK,GAAe,EAAE,CAAC;IAC3B,IAAI,KAAY,CAAC;IAEjB,UAAU,CAAC;QACP,KAAK,GAAG,EAAE,CAAC;QACX,KAAK,GAAG,IAAI,eAAK,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE;QAEzB,EAAE,CAAC,wCAAwC,EAAE;YACzC,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YAErC,aAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,sBAAsB,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sDAAsD,EAAE;YACvD,IAAI,GAAG,GAAG,SAAS,CAAC;YACpB,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YACvB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;YAExD,IAAI,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAE/B,aAAM,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,EAAE,qCAAqC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iCAAiC,EAAE;QAExC,EAAE,CAAC,uDAAuD,EAAE;YACxD,IAAI,GAAG,GAAG,SAAS,CAAC;YACpB,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YAEvB,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;YAE5C,aAAM,CAAC,SAAS,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;YAChD,aAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,+BAA+B,CAAC,CAAC;YAC9D,aAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,qCAAqC,CAAC,CAAC;YAC1E,aAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,6CAA6C,CAAC,CAAC;QACvF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iDAAiD,EAAE;YAClD,IAAI,GAAG,GAAG,SAAS,CAAC;YACpB,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC;YACvB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,IAAI,EAAE,EAAE,CAAC;YAExD,IAAI,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;YAE5C,aAAM,CAAC,OAAO,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IAEP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"cache.test.js","sourcesContent":["import { assert } from \"chai\";\r\nimport Cache from \"../cache\";\r\n\r\ndescribe(\"cache\", () => {\r\n    let items: CacheItems = {};\r\n    let cache: Cache;\r\n\r\n    beforeEach(() => {\r\n        items = {};\r\n        cache = new Cache(items);\r\n    });\r\n\r\n    describe(\"get(string): any\", () => {\r\n\r\n        it(\"should return null when cache is empty\", () => {\r\n            var value = cache.get(\"invalid-key\");\r\n\r\n            assert.equal(value, null, \"value should be null\");\r\n        });\r\n\r\n        it(\"should return the item when the item is in the cache\", () => {\r\n            var key = \"the-key\";\r\n            var obj = { ok: true };\r\n            items[key] = { value: obj, key: key, date: new Date() };\r\n\r\n            var cachedObj = cache.get(key);\r\n\r\n            assert.equal(cachedObj, obj, \"cachedObj as obj should be the same\");\r\n        });\r\n\r\n    });\r\n\r\n    describe(\"add(string, any, Date): boolean\", () => {\r\n\r\n        it(\"should add item to the items variable and return true\", () => {\r\n            var key = \"the-key\";\r\n            var obj = { ok: true };\r\n\r\n            var added = cache.add(key, obj, new Date());\r\n\r\n            assert.isNotNull(added, \"added should be true\");\r\n            assert.isNotNull(items[key], \"items[key] should not be null\");\r\n            assert.isNotNull(items[key].value, \"items[key].value should not be null\");\r\n            assert.equal(items[key].value, obj, \"items[key].value and obj should be the same\");\r\n        });\r\n\r\n        it(\"should return false when the key already exists\", () => {\r\n            var key = \"the-key\";\r\n            var obj = { ok: true };\r\n            items[key] = { key: key, value: obj, date: new Date() };\r\n\r\n            var added = cache.add(key, obj, new Date());\r\n\r\n            assert.isFalse(added, \"added should be null\");\r\n        });\r\n\r\n    });\r\n});"],"sourceRoot":"../../src"}